{"remainingRequest":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\@jiaminghi\\data-view\\lib\\components\\scrollRankingBoard\\src\\main.vue","mtime":1713594891423},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713594892227},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\babel-loader\\lib\\index.js","mtime":1713594892054},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713594892227},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\vue-loader\\lib\\index.js","mtime":1713594897967}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgYXV0b1Jlc2l6ZSBmcm9tICcuLi8uLi8uLi9taXhpbi9hdXRvUmVzaXplJw0KDQppbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tICdAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCcNCg0KaW1wb3J0IHsgZGVlcENsb25lIH0gZnJvbSAnQGppYW1pbmdoaS9jLXJlbmRlci9saWIvcGx1Z2luL3V0aWwnDQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ0R2U2Nyb2xsUmFua2luZ0JvYXJkJywNCiAgbWl4aW5zOiBbYXV0b1Jlc2l6ZV0sDQogIHByb3BzOiB7DQogICAgY29uZmlnOiB7DQogICAgICB0eXBlOiBPYmplY3QsDQogICAgICBkZWZhdWx0OiAoKSA9PiAoe30pDQogICAgfQ0KICB9LA0KICBkYXRhICgpIHsNCiAgICByZXR1cm4gew0KICAgICAgcmVmOiAnc2Nyb2xsLXJhbmtpbmctYm9hcmQnLA0KDQogICAgICBkZWZhdWx0Q29uZmlnOiB7DQogICAgICAgIC8qKg0KICAgICAgICAgKiBAZGVzY3JpcHRpb24gQm9hcmQgZGF0YQ0KICAgICAgICAgKiBAdHlwZSB7QXJyYXk8T2JqZWN0Pn0NCiAgICAgICAgICogQGRlZmF1bHQgZGF0YSA9IFtdDQogICAgICAgICAqLw0KICAgICAgICBkYXRhOiBbXSwNCiAgICAgICAgLyoqDQogICAgICAgICAqIEBkZXNjcmlwdGlvbiBSb3cgbnVtDQogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9DQogICAgICAgICAqIEBkZWZhdWx0IHJvd051bSA9IDUNCiAgICAgICAgICovDQogICAgICAgIHJvd051bTogNSwNCiAgICAgICAgLyoqDQogICAgICAgICAqIEBkZXNjcmlwdGlvbiBTY3JvbGwgd2FpdCB0aW1lDQogICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9DQogICAgICAgICAqIEBkZWZhdWx0IHdhaXRUaW1lID0gMjAwMA0KICAgICAgICAgKi8NCiAgICAgICAgd2FpdFRpbWU6IDIwMDAsDQogICAgICAgIC8qKg0KICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ2Fyb3VzZWwgdHlwZQ0KICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQ0KICAgICAgICAgKiBAZGVmYXVsdCBjYXJvdXNlbCA9ICdzaW5nbGUnDQogICAgICAgICAqIEBleGFtcGxlIGNhcm91c2VsID0gJ3NpbmdsZScgfCAncGFnZScNCiAgICAgICAgICovDQogICAgICAgIGNhcm91c2VsOiAnc2luZ2xlJywNCiAgICAgICAgLyoqDQogICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYWx1ZSB1bml0DQogICAgICAgICAqIEB0eXBlIHtTdHJpbmd9DQogICAgICAgICAqIEBkZWZhdWx0IHVuaXQgPSAnJw0KICAgICAgICAgKiBAZXhhbXBsZSB1bml0ID0gJ3RvbicNCiAgICAgICAgICovDQogICAgICAgIHVuaXQ6ICcnLA0KICAgICAgICAvKioNCiAgICAgICAgICogQGRlc2NyaXB0aW9uIEF1dG8gc29ydCBieSB2YWx1ZQ0KICAgICAgICAgKiBAdHlwZSB7Qm9vbGVhbn0NCiAgICAgICAgICogQGRlZmF1bHQgc29ydCA9IHRydWUNCiAgICAgICAgICovDQogICAgICAgIHNvcnQ6IHRydWUsDQogICAgICAgIC8qKg0KICAgICAgICAgKiBAZGVzY3JpcHRpb24gVmFsdWUgZm9ybWF0dGVyDQogICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn0NCiAgICAgICAgICogQGRlZmF1bHQgdmFsdWVGb3JtYXR0ZXIgPSBudWxsDQogICAgICAgICAqLw0KICAgICAgICB2YWx1ZUZvcm1hdHRlcjogbnVsbA0KICAgICAgfSwNCg0KICAgICAgbWVyZ2VkQ29uZmlnOiBudWxsLA0KDQogICAgICByb3dzRGF0YTogW10sDQoNCiAgICAgIHJvd3M6IFtdLA0KDQogICAgICBoZWlnaHRzOiBbXSwNCg0KICAgICAgYW5pbWF0aW9uSW5kZXg6IDAsDQoNCiAgICAgIGFuaW1hdGlvbkhhbmRsZXI6ICcnLA0KDQogICAgICB1cGRhdGVyOiAwDQogICAgfQ0KICB9LA0KICB3YXRjaDogew0KICAgIGNvbmZpZyAoKSB7DQogICAgICBjb25zdCB7IHN0b3BBbmltYXRpb24sIGNhbGNEYXRhIH0gPSB0aGlzDQoNCiAgICAgIHN0b3BBbmltYXRpb24oKQ0KDQogICAgICBjYWxjRGF0YSgpDQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgYWZ0ZXJBdXRvUmVzaXplTWl4aW5Jbml0ICgpIHsNCiAgICAgIGNvbnN0IHsgY2FsY0RhdGEgfSA9IHRoaXMNCg0KICAgICAgY2FsY0RhdGEoKQ0KICAgIH0sDQogICAgb25SZXNpemUgKCkgew0KICAgICAgY29uc3QgeyBtZXJnZWRDb25maWcsIGNhbGNIZWlnaHRzIH0gPSB0aGlzDQoNCiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4NCg0KICAgICAgY2FsY0hlaWdodHModHJ1ZSkNCiAgICB9LA0KICAgIGNhbGNEYXRhICgpIHsNCiAgICAgIGNvbnN0IHsgbWVyZ2VDb25maWcsIGNhbGNSb3dzRGF0YSB9ID0gdGhpcw0KDQogICAgICBtZXJnZUNvbmZpZygpDQoNCiAgICAgIGNhbGNSb3dzRGF0YSgpDQoNCiAgICAgIGNvbnN0IHsgY2FsY0hlaWdodHMgfSA9IHRoaXMNCg0KICAgICAgY2FsY0hlaWdodHMoKQ0KDQogICAgICBjb25zdCB7IGFuaW1hdGlvbiB9ID0gdGhpcw0KDQogICAgICBhbmltYXRpb24odHJ1ZSkNCiAgICB9LA0KICAgIG1lcmdlQ29uZmlnICgpIHsNCiAgICAgIGxldCB7IGNvbmZpZywgZGVmYXVsdENvbmZpZyB9ID0gdGhpcw0KDQogICAgICB0aGlzLm1lcmdlZENvbmZpZyA9IGRlZXBNZXJnZShkZWVwQ2xvbmUoZGVmYXVsdENvbmZpZywgdHJ1ZSksIGNvbmZpZyB8fCB7fSkNCiAgICB9LA0KICAgIGNhbGNSb3dzRGF0YSAoKSB7DQogICAgICBsZXQgeyBkYXRhLCByb3dOdW0sIHNvcnQgfSA9IHRoaXMubWVyZ2VkQ29uZmlnDQoNCiAgICAgIHNvcnQgJiYgZGF0YS5zb3J0KCh7IHZhbHVlOiBhIH0sIHsgdmFsdWU6IGIgfSkgPT4gew0KICAgICAgICBpZiAoYSA+IGIpIHJldHVybiAtMQ0KICAgICAgICBpZiAoYSA8IGIpIHJldHVybiAxDQogICAgICAgIGlmIChhID09PSBiKSByZXR1cm4gMA0KICAgICAgfSkNCg0KICAgICAgY29uc3QgdmFsdWUgPSBkYXRhLm1hcCgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSkNCiAgICAgIA0KICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oLi4udmFsdWUpIHx8IDANCg0KICAgICAgLy8gYWJzIG9mIG1pbg0KICAgICAgY29uc3QgbWluQWJzID0gTWF0aC5hYnMobWluKQ0KDQogICAgICBjb25zdCBtYXggPSBNYXRoLm1heCguLi52YWx1ZSkgfHwgMA0KDQogICAgICAvLyBhYnMgb2YgbWF4DQogICAgICBjb25zdCBtYXhBYnMgPSBNYXRoLmFicyhtYXgpDQoNCiAgICAgIGNvbnN0IHRvdGFsID0gbWF4ICsgbWluQWJzDQoNCiAgICAgIGRhdGEgPSBkYXRhLm1hcCgocm93LCBpKSA9PiAoeyAuLi5yb3csIHJhbmtpbmc6IGkgKyAxLCBwZXJjZW50OiAocm93LnZhbHVlICsgbWluQWJzKSAvIHRvdGFsICogMTAwIH0pKQ0KDQogICAgICBjb25zdCByb3dMZW5ndGggPSBkYXRhLmxlbmd0aA0KDQogICAgICBpZiAocm93TGVuZ3RoID4gcm93TnVtICYmIHJvd0xlbmd0aCA8IDIgKiByb3dOdW0pIHsNCiAgICAgICAgZGF0YSA9IFsuLi5kYXRhLCAuLi5kYXRhXQ0KICAgICAgfQ0KDQogICAgICBkYXRhID0gZGF0YS5tYXAoKGQsIGkpID0+ICh7IC4uLmQsIHNjcm9sbDogaSB9KSkNCg0KICAgICAgdGhpcy5yb3dzRGF0YSA9IGRhdGENCiAgICAgIHRoaXMucm93cyA9IGRhdGENCiAgICB9LA0KICAgIGNhbGNIZWlnaHRzIChvbnJlc2l6ZSA9IGZhbHNlKSB7DQogICAgICBjb25zdCB7IGhlaWdodCwgbWVyZ2VkQ29uZmlnIH0gPSB0aGlzDQoNCiAgICAgIGNvbnN0IHsgcm93TnVtLCBkYXRhIH0gPSBtZXJnZWRDb25maWcNCg0KICAgICAgY29uc3QgYXZnSGVpZ2h0ID0gaGVpZ2h0IC8gcm93TnVtDQoNCiAgICAgIHRoaXMuYXZnSGVpZ2h0ID0gYXZnSGVpZ2h0DQoNCiAgICAgIGlmICghb25yZXNpemUpIHRoaXMuaGVpZ2h0cyA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCkuZmlsbChhdmdIZWlnaHQpDQogICAgfSwNCiAgICBhc3luYyBhbmltYXRpb24gKHN0YXJ0ID0gZmFsc2UpIHsNCiAgICAgIGxldCB7IGF2Z0hlaWdodCwgYW5pbWF0aW9uSW5kZXgsIG1lcmdlZENvbmZpZywgcm93c0RhdGEsIGFuaW1hdGlvbiwgdXBkYXRlciB9ID0gdGhpcw0KDQogICAgICBjb25zdCB7IHdhaXRUaW1lLCBjYXJvdXNlbCwgcm93TnVtIH0gPSBtZXJnZWRDb25maWcNCg0KICAgICAgY29uc3Qgcm93TGVuZ3RoID0gcm93c0RhdGEubGVuZ3RoDQoNCiAgICAgIGlmIChyb3dOdW0gPj0gcm93TGVuZ3RoKSByZXR1cm4NCg0KICAgICAgaWYgKHN0YXJ0KSB7DQogICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCB3YWl0VGltZSkpDQogICAgICAgIGlmICh1cGRhdGVyICE9PSB0aGlzLnVwZGF0ZXIpIHJldHVybg0KICAgICAgfQ0KDQogICAgICBjb25zdCBhbmltYXRpb25OdW0gPSBjYXJvdXNlbCA9PT0gJ3NpbmdsZScgPyAxIDogcm93TnVtDQoNCiAgICAgIGxldCByb3dzID0gcm93c0RhdGEuc2xpY2UoYW5pbWF0aW9uSW5kZXgpDQogICAgICByb3dzLnB1c2goLi4ucm93c0RhdGEuc2xpY2UoMCwgYW5pbWF0aW9uSW5kZXgpKQ0KDQogICAgICB0aGlzLnJvd3MgPSByb3dzLnNsaWNlKDAsIHJvd051bSArIDEpDQogICAgICB0aGlzLmhlaWdodHMgPSBuZXcgQXJyYXkocm93TGVuZ3RoKS5maWxsKGF2Z0hlaWdodCkNCg0KICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDMwMCkpDQogICAgICBpZiAodXBkYXRlciAhPT0gdGhpcy51cGRhdGVyKSByZXR1cm4NCg0KICAgICAgdGhpcy5oZWlnaHRzLnNwbGljZSgwLCBhbmltYXRpb25OdW0sIC4uLm5ldyBBcnJheShhbmltYXRpb25OdW0pLmZpbGwoMCkpDQoNCiAgICAgIGFuaW1hdGlvbkluZGV4ICs9IGFuaW1hdGlvbk51bQ0KDQogICAgICBjb25zdCBiYWNrID0gYW5pbWF0aW9uSW5kZXggLSByb3dMZW5ndGgNCiAgICAgIGlmIChiYWNrID49IDApIGFuaW1hdGlvbkluZGV4ID0gYmFjaw0KDQogICAgICB0aGlzLmFuaW1hdGlvbkluZGV4ID0gYW5pbWF0aW9uSW5kZXgNCiAgICAgIHRoaXMuYW5pbWF0aW9uSGFuZGxlciA9IHNldFRpbWVvdXQoYW5pbWF0aW9uLCB3YWl0VGltZSAtIDMwMCkNCiAgICB9LA0KICAgIHN0b3BBbmltYXRpb24gKCkgew0KICAgICAgY29uc3QgeyBhbmltYXRpb25IYW5kbGVyLCB1cGRhdGVyIH0gPSB0aGlzDQoNCiAgICAgIHRoaXMudXBkYXRlciA9ICh1cGRhdGVyICsgMSkgJSA5OTk5OTkNCg0KICAgICAgaWYgKCFhbmltYXRpb25IYW5kbGVyKSByZXR1cm4NCg0KICAgICAgY2xlYXJUaW1lb3V0KGFuaW1hdGlvbkhhbmRsZXIpDQogICAgfSwNCiAgfSwNCiAgZGVzdHJveWVkICgpIHsNCiAgICBjb25zdCB7IHN0b3BBbmltYXRpb24gfSA9IHRoaXMNCg0KICAgIHN0b3BBbmltYXRpb24oKQ0KICB9DQp9DQo="},{"version":3,"sources":["main.vue"],"names":[],"mappings":";AA2BA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/scrollRankingBoard/src","sourcesContent":["<template>\r\n  <div class=\"dv-scroll-ranking-board\" :ref=\"ref\">\r\n    <div\r\n      class=\"row-item\"\r\n      v-for=\"(item, i) in rows\"\r\n      :key=\"item.toString() + item.scroll\"\r\n      :style=\"`height: ${heights[i]}px;`\"\r\n    >\r\n      <div class=\"ranking-info\">\r\n        <div class=\"rank\">No.{{ item.ranking }}</div>\r\n        <div class=\"info-name\" v-html=\"item.name\" />\r\n        <div class=\"ranking-value\">{{ mergedConfig.valueFormatter ? mergedConfig.valueFormatter(item) : item.value + mergedConfig.unit }}</div>\r\n      </div>\r\n\r\n      <div class=\"ranking-column\">\r\n        <div\r\n          class=\"inside-column\"\r\n          :style=\"`width: ${item.percent}%;`\"\r\n        >\r\n          <div class=\"shine\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvScrollRankingBoard',\r\n  mixins: [autoResize],\r\n  props: {\r\n    config: {\r\n      type: Object,\r\n      default: () => ({})\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      ref: 'scroll-ranking-board',\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Board data\r\n         * @type {Array<Object>}\r\n         * @default data = []\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Row num\r\n         * @type {Number}\r\n         * @default rowNum = 5\r\n         */\r\n        rowNum: 5,\r\n        /**\r\n         * @description Scroll wait time\r\n         * @type {Number}\r\n         * @default waitTime = 2000\r\n         */\r\n        waitTime: 2000,\r\n        /**\r\n         * @description Carousel type\r\n         * @type {String}\r\n         * @default carousel = 'single'\r\n         * @example carousel = 'single' | 'page'\r\n         */\r\n        carousel: 'single',\r\n        /**\r\n         * @description Value unit\r\n         * @type {String}\r\n         * @default unit = ''\r\n         * @example unit = 'ton'\r\n         */\r\n        unit: '',\r\n        /**\r\n         * @description Auto sort by value\r\n         * @type {Boolean}\r\n         * @default sort = true\r\n         */\r\n        sort: true,\r\n        /**\r\n         * @description Value formatter\r\n         * @type {Function}\r\n         * @default valueFormatter = null\r\n         */\r\n        valueFormatter: null\r\n      },\r\n\r\n      mergedConfig: null,\r\n\r\n      rowsData: [],\r\n\r\n      rows: [],\r\n\r\n      heights: [],\r\n\r\n      animationIndex: 0,\r\n\r\n      animationHandler: '',\r\n\r\n      updater: 0\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { stopAnimation, calcData } = this\r\n\r\n      stopAnimation()\r\n\r\n      calcData()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcData } = this\r\n\r\n      calcData()\r\n    },\r\n    onResize () {\r\n      const { mergedConfig, calcHeights } = this\r\n\r\n      if (!mergedConfig) return\r\n\r\n      calcHeights(true)\r\n    },\r\n    calcData () {\r\n      const { mergeConfig, calcRowsData } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcRowsData()\r\n\r\n      const { calcHeights } = this\r\n\r\n      calcHeights()\r\n\r\n      const { animation } = this\r\n\r\n      animation(true)\r\n    },\r\n    mergeConfig () {\r\n      let { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\r\n    },\r\n    calcRowsData () {\r\n      let { data, rowNum, sort } = this.mergedConfig\r\n\r\n      sort && data.sort(({ value: a }, { value: b }) => {\r\n        if (a > b) return -1\r\n        if (a < b) return 1\r\n        if (a === b) return 0\r\n      })\r\n\r\n      const value = data.map(({ value }) => value)\r\n      \r\n      const min = Math.min(...value) || 0\r\n\r\n      // abs of min\r\n      const minAbs = Math.abs(min)\r\n\r\n      const max = Math.max(...value) || 0\r\n\r\n      // abs of max\r\n      const maxAbs = Math.abs(max)\r\n\r\n      const total = max + minAbs\r\n\r\n      data = data.map((row, i) => ({ ...row, ranking: i + 1, percent: (row.value + minAbs) / total * 100 }))\r\n\r\n      const rowLength = data.length\r\n\r\n      if (rowLength > rowNum && rowLength < 2 * rowNum) {\r\n        data = [...data, ...data]\r\n      }\r\n\r\n      data = data.map((d, i) => ({ ...d, scroll: i }))\r\n\r\n      this.rowsData = data\r\n      this.rows = data\r\n    },\r\n    calcHeights (onresize = false) {\r\n      const { height, mergedConfig } = this\r\n\r\n      const { rowNum, data } = mergedConfig\r\n\r\n      const avgHeight = height / rowNum\r\n\r\n      this.avgHeight = avgHeight\r\n\r\n      if (!onresize) this.heights = new Array(data.length).fill(avgHeight)\r\n    },\r\n    async animation (start = false) {\r\n      let { avgHeight, animationIndex, mergedConfig, rowsData, animation, updater } = this\r\n\r\n      const { waitTime, carousel, rowNum } = mergedConfig\r\n\r\n      const rowLength = rowsData.length\r\n\r\n      if (rowNum >= rowLength) return\r\n\r\n      if (start) {\r\n        await new Promise(resolve => setTimeout(resolve, waitTime))\r\n        if (updater !== this.updater) return\r\n      }\r\n\r\n      const animationNum = carousel === 'single' ? 1 : rowNum\r\n\r\n      let rows = rowsData.slice(animationIndex)\r\n      rows.push(...rowsData.slice(0, animationIndex))\r\n\r\n      this.rows = rows.slice(0, rowNum + 1)\r\n      this.heights = new Array(rowLength).fill(avgHeight)\r\n\r\n      await new Promise(resolve => setTimeout(resolve, 300))\r\n      if (updater !== this.updater) return\r\n\r\n      this.heights.splice(0, animationNum, ...new Array(animationNum).fill(0))\r\n\r\n      animationIndex += animationNum\r\n\r\n      const back = animationIndex - rowLength\r\n      if (back >= 0) animationIndex = back\r\n\r\n      this.animationIndex = animationIndex\r\n      this.animationHandler = setTimeout(animation, waitTime - 300)\r\n    },\r\n    stopAnimation () {\r\n      const { animationHandler, updater } = this\r\n\r\n      this.updater = (updater + 1) % 999999\r\n\r\n      if (!animationHandler) return\r\n\r\n      clearTimeout(animationHandler)\r\n    },\r\n  },\r\n  destroyed () {\r\n    const { stopAnimation } = this\r\n\r\n    stopAnimation()\r\n  }\r\n}\r\n</script>"]}]}