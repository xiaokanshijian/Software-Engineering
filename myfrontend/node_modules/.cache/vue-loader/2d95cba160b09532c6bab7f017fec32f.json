{"remainingRequest":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\@jiaminghi\\data-view\\lib\\components\\borderBox8\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\@jiaminghi\\data-view\\lib\\components\\borderBox8\\src\\main.vue","mtime":1713594891407},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\babel-loader\\lib\\index.js","mtime":1713594892054},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713594892227},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\vue-loader\\lib\\index.js","mtime":1713594897967}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgYXV0b1Jlc2l6ZSBmcm9tICcuLi8uLi8uLi9taXhpbi9hdXRvUmVzaXplJw0KaW1wb3J0IHsgdXVpZCB9IGZyb20gJy4uLy4uLy4uL3V0aWwvaW5kZXgnDQoNCmltcG9ydCB7IGRlZXBNZXJnZSB9IGZyb20gJ0BqaWFtaW5naGkvY2hhcnRzL2xpYi91dGlsL2luZGV4Jw0KDQppbXBvcnQgeyBkZWVwQ2xvbmUgfSBmcm9tICdAamlhbWluZ2hpL2MtcmVuZGVyL2xpYi9wbHVnaW4vdXRpbCcNCg0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAnRHZCb3JkZXJCb3g4JywNCiAgbWl4aW5zOiBbYXV0b1Jlc2l6ZV0sDQogIHByb3BzOiB7DQogICAgY29sb3I6IHsNCiAgICAgIHR5cGU6IEFycmF5LA0KICAgICAgZGVmYXVsdDogKCkgPT4gKFtdKQ0KICAgIH0sDQogICAgZHVyOiB7DQogICAgICB0eXBlOiBOdW1iZXIsDQogICAgICBkZWZhdWx0OiAzDQogICAgfSwNCiAgICBiYWNrZ3JvdW5kQ29sb3I6IHsNCiAgICAgIHR5cGU6IFN0cmluZywNCiAgICAgIGRlZmF1bHQ6ICd0cmFuc3BhcmVudCcNCiAgICB9LA0KICAgIHJldmVyc2U6IHsNCiAgICAgIHR5cGU6IEJvb2xlYW4sDQogICAgICBkZWZhdWx0OiBmYWxzZQ0KICAgIH0NCiAgfSwNCiAgZGF0YSAoKSB7DQogICAgY29uc3QgaWQgPSB1dWlkKCkNCiAgICByZXR1cm4gew0KICAgICAgcmVmOiAnYm9yZGVyLWJveC04JywNCiAgICAgIHBhdGg6IGBib3JkZXItYm94LTgtcGF0aC0ke2lkfWAsDQogICAgICBncmFkaWVudDogYGJvcmRlci1ib3gtOC1ncmFkaWVudC0ke2lkfWAsDQogICAgICBtYXNrOiBgYm9yZGVyLWJveC04LW1hc2stJHtpZH1gLA0KDQogICAgICBkZWZhdWx0Q29sb3I6IFsnIzIzNWZhNycsICcjNGZkMmRkJ10sDQoNCiAgICAgIG1lcmdlZENvbG9yOiBbXQ0KICAgIH0NCiAgfSwNCiAgY29tcHV0ZWQ6IHsNCiAgICBsZW5ndGggKCkgew0KICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzDQoNCiAgICAgIHJldHVybiAod2lkdGggKyBoZWlnaHQgLSA1KSAqIDINCiAgICB9LA0KICAgIHBhdGhEICgpIHsNCiAgICAgIGNvbnN0IHsgcmV2ZXJzZSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpcw0KDQogICAgICBpZiAocmV2ZXJzZSkgcmV0dXJuIGBNIDIuNSwgMi41IEwgMi41LCAke2hlaWdodCAtIDIuNX0gTCAke3dpZHRoIC0gMi41fSwgJHtoZWlnaHQgLSAyLjV9IEwgJHt3aWR0aCAtIDIuNX0sIDIuNSBMIDIuNSwgMi41YA0KDQogICAgICByZXR1cm4gYE0yLjUsIDIuNSBMJHt3aWR0aCAtIDIuNX0sIDIuNSBMJHt3aWR0aCAtIDIuNX0sICR7aGVpZ2h0IC0gMi41fSBMMi41LCAke2hlaWdodCAtIDIuNX0gTDIuNSwgMi41YA0KICAgIH0NCiAgfSwNCiAgd2F0Y2g6IHsNCiAgICBjb2xvciAoKSB7DQogICAgICBjb25zdCB7IG1lcmdlQ29sb3IgfSA9IHRoaXMNCg0KICAgICAgbWVyZ2VDb2xvcigpDQogICAgfQ0KICB9LA0KICBtZXRob2RzOiB7DQogICAgbWVyZ2VDb2xvciAoKSB7DQogICAgICBjb25zdCB7IGNvbG9yLCBkZWZhdWx0Q29sb3IgfSA9IHRoaXMNCg0KICAgICAgdGhpcy5tZXJnZWRDb2xvciA9IGRlZXBNZXJnZShkZWVwQ2xvbmUoZGVmYXVsdENvbG9yLCB0cnVlKSwgY29sb3IgfHwgW10pDQogICAgfQ0KICB9LA0KICBtb3VudGVkICgpIHsNCiAgICBjb25zdCB7IG1lcmdlQ29sb3IgfSA9IHRoaXMNCg0KICAgIG1lcmdlQ29sb3IoKQ0KICB9DQp9DQo="},{"version":3,"sources":["main.vue"],"names":[],"mappings":";AAkEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/borderBox8/src","sourcesContent":["<template>\r\n  <div class=\"dv-border-box-8\" :ref=\"ref\">\r\n    <svg class=\"dv-border-svg-container\" :width=\"width\" :height=\"height\">\r\n      <defs>\r\n        <path\r\n          :id=\"path\"\r\n          :d=\"pathD\"\r\n          fill=\"transparent\"\r\n        />\r\n        <radialGradient\r\n          :id=\"gradient\"\r\n          cx=\"50%\" cy=\"50%\" r=\"50%\"\r\n        >\r\n          <stop\r\n            offset=\"0%\" stop-color=\"#fff\"\r\n            stop-opacity=\"1\"\r\n          />\r\n          <stop\r\n            offset=\"100%\" stop-color=\"#fff\"\r\n            stop-opacity=\"0\"\r\n          />\r\n        </radialGradient>\r\n\r\n        <mask :id=\"mask\">\r\n          <circle cx=\"0\" cy=\"0\" r=\"150\" :fill=\"`url(#${gradient})`\">\r\n            <animateMotion\r\n              :dur=\"`${dur}s`\"\r\n              :path=\"pathD\"\r\n              rotate=\"auto\"\r\n              repeatCount=\"indefinite\"\r\n            />\r\n          </circle>\r\n        </mask>\r\n      </defs>\r\n\r\n      <polygon :fill=\"backgroundColor\" :points=\"`5, 5 ${width - 5}, 5 ${width - 5} ${height - 5} 5, ${height - 5}`\" />\r\n\r\n      <use\r\n        :stroke=\"mergedColor[0]\"\r\n        stroke-width=\"1\"\r\n        :xlink:href=\"`#${path}`\"\r\n      />\r\n\r\n      <use\r\n        :stroke=\"mergedColor[1]\"\r\n        stroke-width=\"3\"\r\n        :xlink:href=\"`#${path}`\"\r\n        :mask=\"`url(#${mask})`\"\r\n      >\r\n        <animate\r\n          attributeName=\"stroke-dasharray\"\r\n          :from=\"`0, ${length}`\"\r\n          :to=\"`${length}, 0`\"\r\n          :dur=\"`${dur}s`\"\r\n          repeatCount=\"indefinite\"\r\n        />\r\n      </use>\r\n    </svg>\r\n\r\n    <div class=\"border-box-content\">\r\n      <slot></slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvBorderBox8',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    },\r\n    dur: {\r\n      type: Number,\r\n      default: 3\r\n    },\r\n    backgroundColor: {\r\n      type: String,\r\n      default: 'transparent'\r\n    },\r\n    reverse: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      ref: 'border-box-8',\r\n      path: `border-box-8-path-${id}`,\r\n      gradient: `border-box-8-gradient-${id}`,\r\n      mask: `border-box-8-mask-${id}`,\r\n\r\n      defaultColor: ['#235fa7', '#4fd2dd'],\r\n\r\n      mergedColor: []\r\n    }\r\n  },\r\n  computed: {\r\n    length () {\r\n      const { width, height } = this\r\n\r\n      return (width + height - 5) * 2\r\n    },\r\n    pathD () {\r\n      const { reverse, width, height } = this\r\n\r\n      if (reverse) return `M 2.5, 2.5 L 2.5, ${height - 2.5} L ${width - 2.5}, ${height - 2.5} L ${width - 2.5}, 2.5 L 2.5, 2.5`\r\n\r\n      return `M2.5, 2.5 L${width - 2.5}, 2.5 L${width - 2.5}, ${height - 2.5} L2.5, ${height - 2.5} L2.5, 2.5`\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  methods: {\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    }\r\n  },\r\n  mounted () {\r\n    const { mergeColor } = this\r\n\r\n    mergeColor()\r\n  }\r\n}\r\n</script>"]}]}