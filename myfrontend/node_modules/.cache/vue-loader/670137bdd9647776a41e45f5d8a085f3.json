{"remainingRequest":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration3\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\@jiaminghi\\data-view\\lib\\components\\decoration3\\src\\main.vue","mtime":1713594891407},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\babel-loader\\lib\\index.js","mtime":1713594892054},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713594892227},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\vue-loader\\lib\\index.js","mtime":1713594897967}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgYXV0b1Jlc2l6ZSBmcm9tICcuLi8uLi8uLi9taXhpbi9hdXRvUmVzaXplJw0KDQppbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tICdAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCcNCg0KaW1wb3J0IHsgZGVlcENsb25lIH0gZnJvbSAnQGppYW1pbmdoaS9jLXJlbmRlci9saWIvcGx1Z2luL3V0aWwnDQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogJ0R2RGVjb3JhdGlvbjMnLA0KICBtaXhpbnM6IFthdXRvUmVzaXplXSwNCiAgcHJvcHM6IHsNCiAgICBjb2xvcjogew0KICAgICAgdHlwZTogQXJyYXksDQogICAgICBkZWZhdWx0OiAoKSA9PiAoW10pDQogICAgfQ0KICB9LA0KICBkYXRhICgpIHsNCiAgICBjb25zdCBwb2ludFNpZGVMZW5ndGggPSA3DQoNCiAgICByZXR1cm4gew0KICAgICAgcmVmOiAnZGVjb3JhdGlvbi0zJywNCg0KICAgICAgc3ZnV0g6IFszMDAsIDM1XSwNCg0KICAgICAgc3ZnU2NhbGU6IFsxLCAxXSwNCg0KICAgICAgcm93TnVtOiAyLA0KICAgICAgcm93UG9pbnRzOiAyNSwNCg0KICAgICAgcG9pbnRTaWRlTGVuZ3RoLA0KICAgICAgaGFsZlBvaW50U2lkZUxlbmd0aDogcG9pbnRTaWRlTGVuZ3RoIC8gMiwNCg0KICAgICAgcG9pbnRzOiBbXSwNCg0KICAgICAgZGVmYXVsdENvbG9yOiBbJyM3YWNhZWMnLCAndHJhbnNwYXJlbnQnXSwNCg0KICAgICAgbWVyZ2VkQ29sb3I6IFtdDQogICAgfQ0KICB9LA0KICB3YXRjaDogew0KICAgIGNvbG9yICgpIHsNCiAgICAgIGNvbnN0IHsgbWVyZ2VDb2xvciB9ID0gdGhpcw0KDQogICAgICBtZXJnZUNvbG9yKCkNCiAgICB9DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICBhZnRlckF1dG9SZXNpemVNaXhpbkluaXQgKCkgew0KICAgICAgY29uc3QgeyBjYWxjU1ZHRGF0YSB9ID0gdGhpcw0KDQogICAgICBjYWxjU1ZHRGF0YSgpDQogICAgfSwNCiAgICBjYWxjU1ZHRGF0YSAoKSB7DQogICAgICBjb25zdCB7IGNhbGNQb2ludHNQb3NpdGlvbiwgY2FsY1NjYWxlIH0gPSB0aGlzDQoNCiAgICAgIGNhbGNQb2ludHNQb3NpdGlvbigpDQoNCiAgICAgIGNhbGNTY2FsZSgpDQogICAgfSwNCiAgICBjYWxjUG9pbnRzUG9zaXRpb24gKCkgew0KICAgICAgY29uc3QgeyBzdmdXSCwgcm93TnVtLCByb3dQb2ludHMgfSA9IHRoaXMNCg0KICAgICAgY29uc3QgW3csIGhdID0gc3ZnV0gNCg0KICAgICAgY29uc3QgaG9yaXpvbnRhbEdhcCA9IHcgLyAocm93UG9pbnRzICsgMSkNCiAgICAgIGNvbnN0IHZlcnRpY2FsR2FwID0gaCAvIChyb3dOdW0gKyAxKQ0KDQogICAgICBsZXQgcG9pbnRzID0gbmV3IEFycmF5KHJvd051bSkuZmlsbCgwKS5tYXAoKGZvbywgaSkgPT4NCiAgICAgICAgbmV3IEFycmF5KHJvd1BvaW50cykuZmlsbCgwKS5tYXAoKGZvbywgaikgPT4gWw0KICAgICAgICAgIGhvcml6b250YWxHYXAgKiAoaiArIDEpLCB2ZXJ0aWNhbEdhcCAqIChpICsgMSkNCiAgICAgICAgXSkpDQoNCiAgICAgIHRoaXMucG9pbnRzID0gcG9pbnRzLnJlZHVjZSgoYWxsLCBpdGVtKSA9PiBbLi4uYWxsLCAuLi5pdGVtXSwgW10pDQogICAgfSwNCiAgICBjYWxjU2NhbGUgKCkgew0KICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0LCBzdmdXSCB9ID0gdGhpcw0KDQogICAgICBjb25zdCBbdywgaF0gPSBzdmdXSA0KDQogICAgICB0aGlzLnN2Z1NjYWxlID0gW3dpZHRoIC8gdywgaGVpZ2h0IC8gaF0NCiAgICB9LA0KICAgIG9uUmVzaXplICgpIHsNCiAgICAgIGNvbnN0IHsgY2FsY1NWR0RhdGEgfSA9IHRoaXMNCg0KICAgICAgY2FsY1NWR0RhdGEoKQ0KICAgIH0sDQogICAgbWVyZ2VDb2xvciAoKSB7DQogICAgICBjb25zdCB7IGNvbG9yLCBkZWZhdWx0Q29sb3IgfSA9IHRoaXMNCg0KICAgICAgdGhpcy5tZXJnZWRDb2xvciA9IGRlZXBNZXJnZShkZWVwQ2xvbmUoZGVmYXVsdENvbG9yLCB0cnVlKSwgY29sb3IgfHwgW10pDQogICAgfQ0KICB9LA0KICBtb3VudGVkICgpIHsNCiAgICBjb25zdCB7IG1lcmdlQ29sb3IgfSA9IHRoaXMNCg0KICAgIG1lcmdlQ29sb3IoKQ0KICB9DQp9DQo="},{"version":3,"sources":["main.vue"],"names":[],"mappings":";AA8BA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/decoration3/src","sourcesContent":["<template>\r\n  <div class=\"dv-decoration-3\" :ref=\"ref\">\r\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\r\n\r\n      <template\r\n        v-for=\"(point, i) in points\"\r\n      >\r\n        <rect\r\n          :key=\"i\"\r\n          :fill=\"mergedColor[0]\"\r\n          :x=\"point[0] - halfPointSideLength\"\r\n          :y=\"point[1] - halfPointSideLength\"\r\n          :width=\"pointSideLength\"\r\n          :height=\"pointSideLength\"\r\n        >\r\n          <animate\r\n            v-if=\"Math.random() > 0.6\"\r\n            attributeName=\"fill\"\r\n            :values=\"`${mergedColor.join(';')}`\"\r\n            :dur=\"Math.random() + 1 + 's'\"\r\n            :begin=\"Math.random() * 2\"\r\n            repeatCount=\"indefinite\"\r\n          />\r\n        </rect>\r\n      </template>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport autoResize from '../../../mixin/autoResize'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nexport default {\r\n  name: 'DvDecoration3',\r\n  mixins: [autoResize],\r\n  props: {\r\n    color: {\r\n      type: Array,\r\n      default: () => ([])\r\n    }\r\n  },\r\n  data () {\r\n    const pointSideLength = 7\r\n\r\n    return {\r\n      ref: 'decoration-3',\r\n\r\n      svgWH: [300, 35],\r\n\r\n      svgScale: [1, 1],\r\n\r\n      rowNum: 2,\r\n      rowPoints: 25,\r\n\r\n      pointSideLength,\r\n      halfPointSideLength: pointSideLength / 2,\r\n\r\n      points: [],\r\n\r\n      defaultColor: ['#7acaec', 'transparent'],\r\n\r\n      mergedColor: []\r\n    }\r\n  },\r\n  watch: {\r\n    color () {\r\n      const { mergeColor } = this\r\n\r\n      mergeColor()\r\n    }\r\n  },\r\n  methods: {\r\n    afterAutoResizeMixinInit () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    calcSVGData () {\r\n      const { calcPointsPosition, calcScale } = this\r\n\r\n      calcPointsPosition()\r\n\r\n      calcScale()\r\n    },\r\n    calcPointsPosition () {\r\n      const { svgWH, rowNum, rowPoints } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      const horizontalGap = w / (rowPoints + 1)\r\n      const verticalGap = h / (rowNum + 1)\r\n\r\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\r\n        new Array(rowPoints).fill(0).map((foo, j) => [\r\n          horizontalGap * (j + 1), verticalGap * (i + 1)\r\n        ]))\r\n\r\n      this.points = points.reduce((all, item) => [...all, ...item], [])\r\n    },\r\n    calcScale () {\r\n      const { width, height, svgWH } = this\r\n\r\n      const [w, h] = svgWH\r\n\r\n      this.svgScale = [width / w, height / h]\r\n    },\r\n    onResize () {\r\n      const { calcSVGData } = this\r\n\r\n      calcSVGData()\r\n    },\r\n    mergeColor () {\r\n      const { color, defaultColor } = this\r\n\r\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\r\n    }\r\n  },\r\n  mounted () {\r\n    const { mergeColor } = this\r\n\r\n    mergeColor()\r\n  }\r\n}\r\n</script>"]}]}