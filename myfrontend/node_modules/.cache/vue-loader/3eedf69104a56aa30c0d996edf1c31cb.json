{"remainingRequest":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\@jiaminghi\\data-view\\lib\\components\\waterLevelPond\\src\\main.vue","mtime":1713594891423},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713594892227},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\babel-loader\\lib\\index.js","mtime":1713594892054},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1713594892227},{"path":"E:\\Grade3\\大三下\\软件工程\\大作业\\海洋可视化系统\\front-end-template-1\\node_modules\\vue-loader\\lib\\index.js","mtime":1713594897967}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["main.vue"],"names":[],"mappings":";AA0CA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA","file":"main.vue","sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/waterLevelPond/src","sourcesContent":["<template>\r\n  <div class=\"dv-water-pond-level\">\r\n    <svg v-if=\"renderer\">\r\n      <defs>\r\n        <linearGradient :id=\"gradientId\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n          <stop v-for=\"lc in svgBorderGradient\" :key=\"lc[0]\"\r\n            :offset=\"lc[0]\"\r\n            :stop-color=\"lc[1]\" />\r\n        </linearGradient>\r\n      </defs>\r\n\r\n      <text\r\n        v-if=\"renderer\"\r\n        :stroke=\"`url(#${gradientId})`\"\r\n        :fill=\"`url(#${gradientId})`\"\r\n        :x=\"renderer.area[0] / 2 + 8\"\r\n        :y=\"renderer.area[1] / 2 + 8\"\r\n      >\r\n        {{ details }}\r\n      </text>\r\n\r\n      <ellipse v-if=\"!shape || shape === 'round'\"\r\n        :cx=\"renderer.area[0] / 2 + 8\"\r\n        :cy=\"renderer.area[1] / 2 + 8\"\r\n        :rx=\"renderer.area[0] / 2 + 5\"\r\n        :ry=\"renderer.area[1] / 2 + 5\"\r\n        :stroke=\"`url(#${gradientId})`\" />\r\n\r\n      <rect v-else\r\n        x=\"2\" y=\"2\"\r\n        :rx=\"shape === 'roundRect' ? 10 : 0\"\r\n        :ry=\"shape === 'roundRect' ? 10 : 0\"\r\n        :width=\"renderer.area[0] + 12\"\r\n        :height=\"renderer.area[1] + 12\"\r\n        :stroke=\"`url(#${gradientId})`\" />\r\n    </svg>\r\n\r\n    <canvas ref=\"water-pond-level\" :style=\"`border-radius: ${radius};`\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { uuid } from '../../../util/index'\r\n\r\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\r\n\r\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\r\n\r\nimport CRender from '@jiaminghi/c-render'\r\n\r\nexport default {\r\n  name: 'DvWaterLevelPond',\r\n  props: {\r\n    config: Object,\r\n    default: () => ({})\r\n  },\r\n  data () {\r\n    const id = uuid()\r\n    return {\r\n      gradientId: `water-level-pond-${id}`,\r\n\r\n      defaultConfig: {\r\n        /**\r\n         * @description Data\r\n         * @type {Array<Number>}\r\n         * @default data = []\r\n         * @example data = [60, 40]\r\n         */\r\n        data: [],\r\n        /**\r\n         * @description Shape of wanter level pond\r\n         * @type {String}\r\n         * @default shape = 'rect'\r\n         * @example shape = 'rect' | 'roundRect' | 'round'\r\n         */\r\n        shape: 'rect',\r\n        /**\r\n         * @description Water wave number\r\n         * @type {Number}\r\n         * @default waveNum = 3\r\n         */\r\n        waveNum: 3,\r\n        /**\r\n         * @description Water wave height (px)\r\n         * @type {Number}\r\n         * @default waveHeight = 40\r\n         */\r\n        waveHeight: 40,\r\n        /**\r\n         * @description Wave opacity\r\n         * @type {Number}\r\n         * @default waveOpacity = 0.4\r\n         */\r\n        waveOpacity: 0.4,\r\n        /**\r\n         * @description Colors (hex|rgb|rgba|color keywords)\r\n         * @type {Array<String>}\r\n         * @default colors = ['#00BAFF', '#3DE7C9']\r\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\r\n         */\r\n        colors: ['#3DE7C9', '#00BAFF'],\r\n        /**\r\n         * @description Formatter\r\n         * @type {String}\r\n         * @default formatter = '{value}%'\r\n         */\r\n        formatter: '{value}%'\r\n      },\r\n\r\n      mergedConfig: {},\r\n\r\n      renderer: null,\r\n\r\n      svgBorderGradient: [],\r\n\r\n      details: '',\r\n\r\n      waves: [],\r\n\r\n      animation: false\r\n    }\r\n  },\r\n  computed: {\r\n    radius () {\r\n      const { shape } = this.mergedConfig\r\n\r\n      if (shape === 'round') return '50%'\r\n\r\n      if (shape === 'rect') return '0'\r\n\r\n      if (shape === 'roundRect') return '10px'\r\n\r\n      return '0'\r\n    },\r\n    shape () {\r\n      const { shape } = this.mergedConfig\r\n\r\n      if (!shape) return 'rect'\r\n\r\n      return shape\r\n    }\r\n  },\r\n  watch: {\r\n    config () {\r\n      const { calcData, renderer } = this\r\n\r\n      renderer.delAllGraph()\r\n\r\n      this.waves = []\r\n\r\n      setTimeout(calcData, 0)\r\n    }\r\n  },\r\n  methods: {\r\n    init () {\r\n      const { initRender, config, calcData } = this\r\n\r\n      initRender()\r\n\r\n      if (!config) return\r\n\r\n      calcData()\r\n    },\r\n    initRender () {\r\n      const { $refs } = this\r\n\r\n      this.renderer = new CRender($refs['water-pond-level'])\r\n    },\r\n    calcData () {\r\n      const { mergeConfig, calcSvgBorderGradient, calcDetails } = this\r\n\r\n      mergeConfig()\r\n\r\n      calcSvgBorderGradient()\r\n\r\n      calcDetails()\r\n\r\n      const { addWave, animationWave } = this\r\n\r\n      addWave()\r\n\r\n      animationWave()\r\n    },\r\n    mergeConfig () {\r\n      const { config, defaultConfig } = this\r\n\r\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config)\r\n    },\r\n    calcSvgBorderGradient () {\r\n      const { colors } = this.mergedConfig\r\n\r\n      const colorNum = colors.length\r\n\r\n      const colorOffsetGap = 100 / (colorNum - 1)\r\n\r\n      this.svgBorderGradient = colors.map((c, i) => [colorOffsetGap * i, c])\r\n    },\r\n    calcDetails () {\r\n      const { data, formatter } = this.mergedConfig\r\n\r\n      if (!data.length) {\r\n        this.details = ''\r\n\r\n        return\r\n      }\r\n\r\n      const maxValue = Math.max(...data)\r\n\r\n      this.details = formatter.replace('{value}', maxValue)\r\n    },\r\n    addWave () {\r\n      const { renderer, getWaveShapes, getWaveStyle, drawed } = this\r\n\r\n      const shapes = getWaveShapes()\r\n      const style = getWaveStyle()\r\n\r\n      this.waves = shapes.map(shape => renderer.add({\r\n        name: 'smoothline',\r\n        animationFrame: 300,\r\n        shape,\r\n        style,\r\n        drawed\r\n      }))\r\n    },\r\n    getWaveShapes () {\r\n      const { mergedConfig, renderer, mergeOffset } = this\r\n\r\n      const { waveNum, waveHeight, data } = mergedConfig\r\n\r\n      const [w, h] = renderer.area\r\n\r\n      const pointsNum = waveNum * 4 + 4\r\n\r\n      const pointXGap = w / waveNum / 2\r\n\r\n      return data.map(v => {\r\n        let points = new Array(pointsNum).fill(0).map((foo, j) => {\r\n          const x = w - pointXGap * j\r\n\r\n          const startY = (1 - v / 100) * h\r\n\r\n          const y = j % 2 === 0 ? startY : startY - waveHeight\r\n\r\n          return [x, y]\r\n        })\r\n\r\n        points = points.map(p => mergeOffset(p, [pointXGap * 2, 0]))\r\n\r\n        return { points }\r\n      })\r\n    },\r\n    mergeOffset ([x, y], [ox, oy]) {\r\n      return [x + ox, y + oy]\r\n    },\r\n    getWaveStyle () {\r\n      const { renderer, mergedConfig } = this\r\n\r\n      const h = renderer.area[1]\r\n\r\n      return {\r\n        gradientColor: mergedConfig.colors,\r\n        gradientType: 'linear',\r\n        gradientParams: [0, 0, 0, h],\r\n        gradientWith: 'fill',\r\n        opacity: mergedConfig.waveOpacity,\r\n        translate: [0, 0]\r\n      }\r\n    },\r\n    drawed ({ shape: { points } }, { ctx, area }) {\r\n      const firstPoint = points[0]\r\n      const lastPoint = points.slice(-1)[0]\r\n\r\n      const h = area[1]\r\n\r\n      ctx.lineTo(lastPoint[0], h)\r\n      ctx.lineTo(firstPoint[0], h)\r\n\r\n      ctx.closePath()\r\n\r\n      ctx.fill()\r\n    },\r\n    async animationWave (repeat = 1) {\r\n      const { waves, renderer, animation } = this\r\n\r\n      if (animation) return\r\n\r\n      this.animation = true\r\n\r\n      const w = renderer.area[0]\r\n\r\n      waves.forEach(graph => {\r\n        graph.attr('style', { translate: [0, 0] })\r\n\r\n        graph.animation('style', {\r\n          translate: [w, 0]\r\n        }, true)\r\n      })\r\n\r\n      await renderer.launchAnimation()\r\n\r\n      this.animation = false\r\n\r\n      if (!renderer.graphs.length) return\r\n\r\n      this.animationWave(repeat + 1)\r\n    }\r\n  },\r\n  mounted () {\r\n    const { init } = this\r\n\r\n    init()\r\n  },\r\n  beforeDestroy () {\r\n    const { renderer } = this\r\n\r\n    renderer.delAllGraph()\r\n\r\n    this.waves = []\r\n  }\r\n}\r\n</script>"]}]}